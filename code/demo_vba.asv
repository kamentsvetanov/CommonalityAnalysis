% Code showing the use of Voxel-based Analysis (VBA) with fitlm and commonality function.
%
% Running the analysis requires two variables in the workspace, T and
% Model, similar to the usage of 'fitlm'
% 
%% T       - 
%  Table containing all variables specified in Model (see below).
%
%% Model   - 
% A string specifying the linear model formula using Wilkinson notation.
% (https://uk.mathworks.com/help/stats/wilkinson-notation.html) 
% e.g. Equation:
% 'y ~ terms', where 
% 'y'       - defines the name of the response variable
% 'terms'   - defines the model using the predictor variable names and the operators.
% 
% Images (e.g. anatomical T1w scans) can be used as response and/or predictor variables. 
%
% Model = 'f_T1w ~ age + sex'; 
%
% Specifies analysis to predict T1w intensity values using age and sex as predictors.
% 
% VBA can dissociate between brainmaps and univariate variables based on 
% the prefix 'f_' of the variable in Model, e.g. f_T1w indicates that
% T.f_T1w contains filepaths to individual's T1-weighted processed images. 
%
% For large models with many covariates of no interest/confounders, it is 
% adviseable to indicate these variables with 'c_'. That way VBA will not
% generate outputs for these variables making it more efficient.
%
% e.g. 
% Model = 'f_T1w ~ Age + c_Sex'
% VBA will not save maps for unique effects of Sex and shared effects of
% Age and Sex.
%
% Depenendencies (download from https://github.com/kamentsvetanov/external):
% SPM 12 
% palm_quickperms
%
% These dependencies are at https://github.com/kamentsvetanov/external
% .../mat/spm12
% .../mat/palm
% and need to be loaded in Matlab's path
% 


clear 
rootdir = '/home/kt03/Projects/public-code/CommonalityAnalysis/data/rsfa/';
load(fullfile(rootdir,'subject_info.mat'));

Model = 'f_rsfa ~ Age + c_Sex';

% -------------------------------------------------
% Assemble cfg structure needed to run the analysis
% -------------------------------------------------
cfg                 = [];
cfg.model           = Model;
cfg.rootDir         = '/imaging/camcan/sandbox/kt03/temp/'; 
cfg.f_mask          = fullfile(rootdir,'mask.nii');
cfg.numPerm         = 100;
cfg.doCommonality   = 1;
cfg                 = ca_vba_glm_fitlm(T,cfg);

% ---------------------------
% Perform TFCE thresholding
% ---------------------------
cfg.tfce.path2data  = cfg.outDir;
cfg.tfce.typeStats  = 'tval'; 
cfg.tfce.Ns         = size(cfg.tbl,1);
cfg.tfce.Np         = size(cfg.tbl,2)-1;
cfg.tfce.th         = 1.5;
cfg                 = ca_vba_tfce_threshold(cfg);

%% ------------------------------------------------------------------------
% Extract information for significant TFCE clusters in a results Table 
% -------------------------------------------------------------------------
prefix  = 'tfce150';
cfg     = ca_vba_tfce_resultsTable(cfg,prefix);
fout    = fullfile(cfg.outDir,sprintf('resultsTable_%s.xlsx',prefix));
writetable(cfg.tfce.tableConcat,fout);
save(regexprep(fout,'xlsx','mat'),'cfg');

%% ------------------------------------------------------------------------ 
% Clean up some directories
% -------------------------------------------------------------------------
fn = dir(cfg.outDir);fn = fn([fn.isdir]);fn = {fn.name}';
fn(ismember(fn,{'..','.'}))=[];
for idir = 1:numel(fn)
    rmdir(fullfile(cfg.outDir,fn{idir}),'s');
end

%% ROI extraction (based on Clusters)
% Select clusters based on TFCE resutls

% Make a new table across all coefficients and clusters
% -----------------------------------------------------
namecoeff = fieldnames(cfg.tfce.results);
R = table();
for icoeff = 1:numel(namecoeff)
    coeff  = string(namecoeff{icoeff});
    tbl = cfg.tfce.results.(coeff);
    
    if ~ismissing(tbl.cluster_name) % Check if table is not empty
        tbl.coeff_name = repmat(coeff,size(tbl,1),1);
        R      = [R;tbl];
    end
end
R.id = [1:size(R,1)]';

% Extract subject average values for each cluster in each imaging data set
% ------------------------------------------------------------------------
varnameMaps = regexp(cfg.model,('f_\w*'),'match');

% Create Cluster names based on coefficient name, cluster number and node name
nodenames = strcat(R.coeff_name,'_',R.cluster_name);
nodenames = regexprep(nodenames,'\.','_');
nodenames = regexprep(nodenames,{' ','-'},'');

% (optional) Select a subsest of contrasts, as some are not of interest
% ---------------------------------------------------------------------
contr     = {'Age'}; % Here we focus only clusters with effects in Ageing
% contr     = {'Age','Sex'}; % Here we focus only clusters with effects in Ageing and Sex
idx       = contains(nodenames,strcat(contr,'_'));
nodenames = nodenames(idx);
R         = R(idx,:);

roi             = [];
roi.outDir      = [cfg.outDir '/ROI']; mkdir(roi.outDir);
roi.space       = 'cluster';

N = T;
for imap = 1:numel(varnameMaps)
    varname         = varnameMaps{imap};
    newvarname      = strcat(varname(3:end),'_',nodenames);%[varname(3:end) '_' nodename];
    roi.VOI         = {newvarname{:};R.cluster_voxels{:}}';
    roi.datafiles   = T.(varname); % List file paths to subjects' first level contrast images

    % Option to save Cluster mask in MNI space
    if imap == 1
        roi.doSaveMask  = 1;
    else
        roi.doSaveMask  = 0;
    end

    tblNode = kat_fmri_extract_roi(roi);
    N       = [N tblNode];
end


    
    